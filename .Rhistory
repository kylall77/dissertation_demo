load("~/FromSourceToMELTT/run_14.8_4_nga.Rdata")
controlNGA <- run$TauCon
library(rstan)
data <- rstan::ext(run)
data <- rstan::extract(run)
controlNGA <- data$TauCon
intensityNGA <- data$DeltaCon
controlNGA
save(controlNGA, file="C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/controlNGA.rdata")
save(controlNGA, file="C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/intensityNGA.rdata")
get_wd()
getwd()
setwd("C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation")
# Load data.
load("data/controlNGA")
# Load data.
load("data/controlNGA.rdata")
load("data/intensityNGA.rdata")
load("data/intensityNGA.rdata")
load("~/FromSourceToMELTT/run_14.8_4_nga.Rdata")
data <- rstan::extract(run)
controlNGA <- data$TauCon
intensityNGA <- data$DeltaCon
save(controlNGA, file="data/controlNGA.rdata")
save(intensityNGA, file="data/intensityNGA.rdata")
setwd("C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation")
# Load data.
load("data/controlNGA.rdata")
load("data/intensityNGA.rdata")
#########################################
### Prepare GADM boundary shapefiles. ###
#########################################
nigeria2 <- sf::st_as_sf(read_sf("gadm/nigeria/gadm41_NGA_2.shp")) %>%
filter(NAME_1 == "Adamawa" | NAME_1 == "Bauchi" | NAME_1 == "Borno" | NAME_1 == "Gombe" | NAME_1 == "Taraba" | NAME_1 == "Yobe")
# Load libraries.
library(dplyr)
#########################################
### Prepare GADM boundary shapefiles. ###
#########################################
nigeria2 <- sf::st_as_sf(read_sf("gadm/nigeria/gadm41_NGA_2.shp")) %>%
filter(NAME_1 == "Adamawa" | NAME_1 == "Bauchi" | NAME_1 == "Borno" | NAME_1 == "Gombe" | NAME_1 == "Taraba" | NAME_1 == "Yobe")
library(sf)
#########################################
### Prepare GADM boundary shapefiles. ###
#########################################
nigeria2 <- sf::st_as_sf(read_sf("gadm/nigeria/gadm41_NGA_2.shp")) %>%
filter(NAME_1 == "Adamawa" | NAME_1 == "Bauchi" | NAME_1 == "Borno" | NAME_1 == "Gombe" | NAME_1 == "Taraba" | NAME_1 == "Yobe")
#########################################
### Prepare GADM boundary shapefiles. ###
#########################################
nigeria2 <- sf::st_as_sf(read_sf("data/gadm/nigeria/gadm41_NGA_2.shp")) %>%
filter(NAME_1 == "Adamawa" | NAME_1 == "Bauchi" | NAME_1 == "Borno" | NAME_1 == "Gombe" | NAME_1 == "Taraba" | NAME_1 == "Yobe")
plot(nigeria2)
cameroon2 <- sf::st_as_sf(read_sf("data/gadm/cameroon/gadm41_CMR_2.shp")) %>%
filter((NAME_1 == "ExtrÃªme-Nord") & (NAME_2=="Logone et Chari" | NAME_2=="Mayo Sava" | NAME_2=="Mayo Tsanaga"))
plot(cameroon2)
chad2 <- sf::st_as_sf(read_sf("gadm/chad/gadm41_TCD_2.shp")) %>%
filter(NAME_2 == "Mamdi")
niger3 <- sf::st_as_sf(read_sf("gadm/niger/gadm41_NER_3.shp")) %>%
filter(NAME_1 == "Diffa" & NAME_3 != "ZR N' Guigmi" & NAME_2 != "N'Guigmi" & NAME_3 != "Goudoumaria" & NAME_3 != "Maine Soroa")
chad2 <- sf::st_as_sf(read_sf("data/gadm/chad/gadm41_TCD_2.shp")) %>%
filter(NAME_2 == "Mamdi")
niger3 <- sf::st_as_sf(read_sf("data/gadm/niger/gadm41_NER_3.shp")) %>%
filter(NAME_1 == "Diffa" & NAME_3 != "ZR N' Guigmi" & NAME_2 != "N'Guigmi" & NAME_3 != "Goudoumaria" & NAME_3 != "Maine Soroa")
plot(niger3)
# Filter to only the individual division names.
nigeria2test <- nigeria2_subset[,7]
cameroon2test <- cameroon2_subset[,7]
# Filter to only the individual division names.
nigeria2test <- nigeria2[,7]
cameroon2test <- cameroon2[,7]
chad2test <- chad2[,7]
niger3test <- niger3[,10]; names(niger3test) <- c("NAME_2","geometry")
# Combine divisions from all countries.
spatial_units <- rbind(nigeria2test,cameroon2test,chad2test,niger3test)
plot(spatial_units)
save(spatial_units, file="data/spatialUnits.Rdata")
# Remove unnecessary constituents from memory.
rm(nigeria2,nigeria2_subset,cameroon2,cameroon2_subset,chad2,chad2_subset,niger3,niger3_subset,nigeria2test,cameroon2test,chad2test,niger3test)
spatialUnits <- spatial_units
rm(spatial_units)
plot(spatialUnits)
locationsNGA <- spatialUnits
save(locationsNGA, file="data/locationsNGA.rdata")
shiny::runApp('dashboardNGA')
meanControlNGA <- apply(controlNGA, 2:3, mean)
plot(meanControlNGA)
plotdata <- locationsNGA %>% mutate(value = mean[1,])
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata,year){ggplot()+
geom_sf(data=plotdata, aes(fill=value, alpha=trans), color=NA)+
scale_fill_stepsn(breaks=seq(-1,1,by=0.4), limits=c(-1,1), colors=c(
"green","blue", "darkviolet", "red", "gold"
))+
scale_alpha_continuous(breaks=seq(0.2,1,by=0.2), limits=c(0,1))+
geom_sf(data=nga0, fill=NA, lwd=1.5, aes(color="Nigerian Border"))+
scale_color_manual(values=c("Nigerian Border"="black"))+
labs(
fill="Zone of Control",
alpha="Relative Precision",
color="",
)+
geom_text(aes(x=10, y= 14), label=year, size=8, family="LM Roman 10", inherit.aes = FALSE)+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)+
theme(
text=element_text(size=16, family="LM Roman 10"),
legend.direction = "vertical"
)
}
draw_map(plotdata)
library(ggplot2)
draw_map(plotdata)
draw_map <- function(plotdata,year){ggplot()+
geom_sf(data=plotdata, aes(fill=value, alpha=trans), color=NA)+
scale_fill_stepsn(breaks=seq(-1,1,by=0.4), limits=c(-1,1), colors=c(
"green","blue", "darkviolet", "red", "gold"
))+
scale_alpha_continuous(breaks=seq(0.2,1,by=0.2), limits=c(0,1))+
#geom_sf(data=nga0, fill=NA, lwd=1.5, aes(color="Nigerian Border"))+
scale_color_manual(values=c("Nigerian Border"="black"))+
labs(
fill="Zone of Control",
alpha="Relative Precision",
color="",
)+
geom_text(aes(x=10, y= 14), label=year, size=8, family="LM Roman 10", inherit.aes = FALSE)+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)+
theme(
text=element_text(size=16, family="LM Roman 10"),
legend.direction = "vertical"
)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata){ggplot()+
geom_sf(data=plotdata, aes(fill=value), color=NA)+
scale_fill_stepsn(breaks=seq(-1,1,by=0.4), limits=c(-1,1), colors=c(
"green","blue", "darkviolet", "red", "gold"
))+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata){ggplot()+
geom_sf(data=plotdata, aes(fill=value), color=NA)+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata){ggplot()+
geom_sf(data=plotdata, aes(fill=value), color=NA)+
scale_fill_continuous(breaks=seq(-1,1,by=0.5))+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata){ggplot()+
geom_sf(data=plotdata, aes(fill=value), color=NA)+
scale_fill_continuous(breaks=seq(-1,1,by=0.5), limits=c(-1,1))+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata){ggplot()+
geom_sf(data=plotdata, aes(fill=value), color=NA)+
scale_fill_continuous(breaks=seq(-1,1,by=0.5), limits=c(-1,1), type="viridis")+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata){ggplot()+
geom_sf(data=plotdata, aes(fill=value), color=NA)+
scale_fill_continuous(breaks=seq(-1,1,by=0.5), limits=c(-1,1), type="plasma")+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
draw_map <- function(plotdata){ggplot()+
geom_sf(data=plotdata, aes(fill=value), color=NA)+
scale_fill_continuous(breaks=seq(-1,1,by=0.5), limits=c(-1,1), type="viridis")+
coord_sf(xlim=c(8.9,15), ylim=c(6.7,14.3))+
theme_void(base_size=20)
}
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[1,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[2,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[3,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[4,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[5,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[6,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[7,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[8,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[9,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[10,])
draw_map(plotdata)
plotdata <- locationsNGA %>% mutate(value = meanControlNGA[11,])
draw_map(plotdata)
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel(tags$h3("Estimated Territorial Control, Boko Haram (JAS/ISWAP) versus Nigerian Government/MNJTF")),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("years",
"Year",
min = 2010,
max = 2020,
value = 2010,
ticks = FALSE,
sep = "",
animate=TRUE)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
runApp('dashboardNGA')
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages("shinylive")
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
library(httpuv)
library(shinlive)
library(shinylive)
shinylive::export(
appdir = "C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/dashboardNGA",
destdir = "C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/site"
)
httpuv::runStaticServer("site/", port=8008)
httpuv::runStaticServer("C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/site/", port=8008)
shinylive::export(
appdir = "C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/dashboardNGA",
destdir = "C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/docs"
)
httpuv::runStaticServer("C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/docs")
servr::httd("C:/Users/Kyle Allen/Documents/R/Shiny_Dissertation/docs")
packageVersion("httpuv")
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
packageVersion("httpuv")
find.package("httpuv")
install.packages("httpuv", lib = .libPaths()[1])
install.packages("httpuv", lib = .libPaths()[1])
install.packages("httpuv", lib = .libPaths()[1])
